from aiogram import types
from database.manager import CategoryManager, FilmManager, GuessedFilmManager
from bot_utils.keybords import get_category_btns

from redis_client import redis_client
from .states import UserMessageState
from aiogram.dispatcher import FSMContext


def get_random_film(tg_id, category):
    guessed_film = GuessedFilmManager().get_guessed_films_ids(tg_id)
    film = FilmManager().get_random_film(film_ids=guessed_film,category_id=category)
    return film


async def welcome_message(message:types.Message):
    text = """
    –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤ '–£–≥–∞–¥–∞–π —Ñ–∏–ª—å–º –ø–æ —ç–º–æ–¥–∑–∏!'. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'.üéÆüé¨
    """
  
    
    await message.answer(text)

async def start_game(message:types.Message):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä—ã:"
    user_id = message["from"].id
    data =await redis_client.get_user_data(user_id)
    if data:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞. –ñ–µ–ª–∞–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É?")
    else:
        markup = get_category_btns()
        await message.answer(text, reply_markup=markup)
    

async def start_with_category(call: types.CallbackQuery, state: FSMContext):
    user_data = await redis_client.get_user_data(call.message.chat.id)
    if user_data:
        await call.message.answer("–£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–≥—Ä—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    else:
        choice = str(call.data).split("_")[1]
        data = {
            "level_choice":choice,
            "test":"test",
        }
    user_id = call.message.chat.id
    await redis_client.cache_user_data(user_tg_id=user_id, data=data)
    tg_id = user_id
    guessed_film = GuessedFilmManager().get_guessed_films_ids(tg_id)
    film = FilmManager().get_random_film(film_ids=guessed_film,category_id=choice)
    
    await redis_client.cache_user_film(tg_id, {"id":film.id, "text":film.name_text})
    
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
    await call.message.answer(f"{film.emoji_text}")
    


async def send_questions(message:types.Message, state: FSMContext):
    tg_id = message["from"].id
    user_data = await redis_client.get_user_data(tg_id)
    if user_data:
        answer = message.text
        user_film = await redis_client.get_user_film(tg_id)

        if answer == user_film["text"]:
            await message.answer(f"–£—Ä–∞! –í—ã —É–≥–∞–¥–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ {user_film['text']}!")
            await redis_client.delete_user_film(tg_id)
            GuessedFilmManager().insert_guessed_film(tg_id, user_film["id"])
            film = get_random_film(tg_id, category=user_data["level_choice"])
            redis_client.cache_user_film(tg_id, {"id":film.id, "text":film.name_text})
            await message.answer("–£–≥–∞–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å–º:")
            await message.answer(f"{film.emoji_text}")
        else:
            await message.answer("–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ \start_game –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã"
        await message.answer(text)

    
    

async def finish_game(message:types.Message):
    user_id = message["from"].id
    await redis_client.del_user_data(user_id)
    await message.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: 0")


async def get_movie(message:types.Message):
    films = FilmManager().get_films()
    for f in films:
        await message.answer(f"{f.emoji_text}")